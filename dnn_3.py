# -*- coding: utf-8 -*-
"""Dnn-3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dp1Rja_1UKVRNaW0Ux0fS4MXUkzfyodH

# Preprocessing Data.
"""

import pandas as pd
import numpy as np
import h5py
from sklearn.preprocessing import MinMaxScaler
from sklearn.impute import SimpleImputer

def cat2num_sex(val):
  if val == "male":
    return 1
  else:
    return 0

def cat2num_embark(val):
  if val == "C":
    return 2
  elif val == "Q":
    return 1
  else:
    return 0
  
df = pd.read_csv("train.csv")  

df = df.sample(frac=1).reset_index(drop=True)


# Missing Data
df['Age'] = df['Age'].fillna(value = df.Age.median(),inplace = False)

# Categorical to Numerical
df['Sex'] = df['Sex'].apply(cat2num_sex)
df['Embarked'] = df['Embarked'].apply(cat2num_embark)

# Normalize
scaler = MinMaxScaler()
df['Age'] = scaler.fit_transform(np.array(df['Age']).reshape(-1,1))
df['Fare'] = scaler.fit_transform(np.array(df['Fare']).reshape(-1,1))


# Coloumns
target_cols = ["Survived"]
feature_cols = ["Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked"]

X_train = df[feature_cols]
y_train = df[target_cols]


train_size = int(len(y_train) * 0.80)
with h5py.File("dataset-v4.h5", 'w') as f:
  f.create_dataset("X_train", data=np.array(X_train[:train_size]))
  f.create_dataset('y_train', data=np.array(y_train[:train_size]))
  f.create_dataset("X_val", data=np.array(X_train[train_size:]))
  f.create_dataset("y_val", data=np.array(y_train[train_size:]))

"""**Build Model**"""

from keras.models import Sequential
from keras.layers import Dense, Activation, BatchNormalization, Dropout


model = Sequential()
# I layer
model.add(Dense(50,input_dim = 7))
model.add(Dropout(0.3))
model.add(BatchNormalization(momentum = 0.99))
model.add(Activation('relu'))
# II Layer
model.add(Dense(30))
model.add(Dropout(0.2))
model.add(BatchNormalization(momentum=0.99))
model.add(Activation('relu'))
# Final Layer
model.add(Dense(1))
model.add(Activation('sigmoid'))

"""**Train Model**"""

from keras.optimizers import Adam
from keras.callbacks import CSVLogger, ModelCheckpoint

adam = Adam(lr = 0.05, epsilon = 1e-8)
model.compile(loss = 'mean_squared_error',optimizer = adam, metrics = ['accuracy'])


with h5py.File(''.join(['dataset-v4.h5']), 'r') as hf:
      X_train = hf['X_train'].value
      y_train = hf['y_train'].value
      X_val = hf['X_val'].value
      y_val = hf['y_val'].value
      
model.fit(X_train,y_train,batch_size = 64, validation_data = (X_val,y_val), epochs = 1000,  callbacks=[
                  CSVLogger(
                      'logs.csv',
                      append=True
                  ),
                  ModelCheckpoint(
                      'model-ffn-{epoch:02d}-{val_acc:.2f}-{val_loss:.5f}.hdf5',
                      monitor='val_acc',
                      verbose=1,
                      mode='min'
                  )
              ]
)

"""**Test Model**"""

df = pd.read_csv("test.csv")

# Missing Data
df['Age'] = df['Age'].fillna(value=df.Age.median())
df['Fare'] = df['Fare'].fillna(value=df.Fare.median())


# Categorical to Numerical
df['Sex'] = df['Sex'].apply(cat2num_sex)
df['Embarked'] = df['Embarked'].apply(cat2num_embark)

# Normalization
scaler = MinMaxScaler()
df['Age'] = scaler.fit_transform(np.array(df['Age']).reshape(-1, 1))
df['Fare'] = scaler.fit_transform(np.array(df['Fare']).reshape(-1, 1))

# Columns
features_cols = ["Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "Embarked"]
X_test = np.array(df[features_cols])

model.load_weights('model-ffn-999-0.83-0.13249.hdf5')

# inference
predicted = model.predict(X_test)

vals = np.round(predicted)
range = np.arange(892, 1310)

with open("output.csv", "w") as f:
    f.write("PassengerId,Survived\n")
    for x, y in zip(range, vals):
        f.write("{},{}\n".format(x, int(y[0])))
f.close()